name: CI Pipeline

on:
  push:
    branches: [ main, develop, tests ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test Suite (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        php-version: ['8.2', '8.3']
        include:
          - php-version: '8.2'
            coverage: true
          - php-version: '8.3'
            coverage: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: xdebug
          tools: composer:v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Check for security vulnerabilities
        run: composer audit

      - name: Run PHPUnit Tests
        run: |
          if [ "${{ matrix.coverage }}" = "true" ]; then
            XDEBUG_MODE=coverage ./vendor/bin/phpunit --coverage-clover coverage/clover.xml --coverage-html coverage/html --coverage-text
          else
            ./vendor/bin/phpunit
          fi

      - name: Run Behat Tests
        run: ./vendor/bin/behat --format=progress

      - name: Verify 100% Code Coverage
        if: matrix.coverage
        run: php bin/check-coverage.php

      - name: Archive Coverage Report
        if: matrix.coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/html/
          retention-days: 30

  lint:
    name: Code Quality & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          tools: composer:v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

      - name: Check PHP syntax
        run: find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;

      - name: Check code style (if PHP CS Fixer is available)
        run: |
          if [ -f "./vendor/bin/php-cs-fixer" ]; then
            ./vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
          else
            echo "PHP CS Fixer not installed, skipping code style check"
          fi

      - name: Run PHPStan (if available)
        run: |
          if [ -f "./vendor/bin/phpstan" ]; then
            ./vendor/bin/phpstan analyse
          else
            echo "PHPStan not installed, skipping static analysis"
          fi

  matrix-check:
    name: Matrix Status Check
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: always()

    steps:
      - name: Check Matrix Success
        run: |
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.lint.result }}" == "success" ]]; then
            echo "✅ All matrix jobs passed!"
            exit 0
          else
            echo "❌ Some matrix jobs failed:"
            echo "Test job: ${{ needs.test.result }}"
            echo "Lint job: ${{ needs.lint.result }}"
            exit 1
          fi
